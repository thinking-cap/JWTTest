using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Security.Claims;
using Newtonsoft.Json.Linq;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;


namespace JWtTest
{
    public static class JWTHelper
    {

        //3D Secure Credentials
        //Environment:	Test
        //Processor ID: 	134-01
        //Merchant ID: 	onlinecourses@britishcouncil.org
        //Transaction PW:	
        //Transaction URL:

        //Cruise Credentials
        //ApiIdentifier:	5d2e3fb9c11b922e505b140d
        //ApiKey:	e40041bf-e55b-4404-bb2d-78b0524c1f84
        //Name:	onlinecourses@britishcouncil.org
        //OrgUnitID:	5cc32b12bb87681cf4713551




        private static string apiIdentifier = "5d2e3fb9c11b922e505b140d";
        private static string apiKey = "e40041bf-e55b-4404-bb2d-78b0524c1f84";
        private static string orgUnitId = "5cc32b12bb87681cf4713551";
        private static string api_url = "http://centineltest.cardinalcommerce.com/";


        public static string GenerateToken(int expireMinutes = 15)
        {
            // var symmetricKey = Convert.FromBase64String(this.apiKey);
            long epoch = ToUnixTime(DateTime.UtcNow);
            long expEpoch = ToUnixTime(DateTime.UtcNow.AddMinutes(10));
            string orderInfo = "{\"OrderDetails\":{\"OrderNumber\":\"19ec6910-5048-11e6-8c35-8789b865ff15\",\"Amount\":\"19.99\",\"CurrencyCode\":\"840\"}}";

            var tokenHandler = new JwtSecurityTokenHandler();
            var securityKey = new Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(System.Text.Encoding.Default.GetBytes(apiKey));

            var now = DateTime.UtcNow;
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(
                    new[]
                    {
                        new Claim("exp", expEpoch.ToString()),
                        new Claim("iat",epoch.ToString()),
                        new Claim("iss", apiIdentifier),
                        new Claim("jti", Guid.NewGuid().ToString()),//changing every time
                        new Claim("OrgUnitId", orgUnitId),
                        new Claim("ObjectifyPayload", "false"),
                        new Claim("Payload", orderInfo)
                    }
                ),

                IssuedAt = now,
                Expires = now.AddMinutes(Convert.ToInt32(expireMinutes)),
                SigningCredentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256)
            };

            var stoken = tokenHandler.CreateToken(tokenDescriptor);
            var token = tokenHandler.WriteToken(stoken);

            return token;
        }


        public static bool DecodeAndValidateResponseJwt(string responseJwt)
        {
            bool valid = false;
            try
            {
                // var apiKey = ConfigurationManager.AppSettings["APIKey"];
               

                var keys = new List<SecurityKey>();
                var securityKey = new Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(System.Text.Encoding.Default.GetBytes(apiKey));
                keys.Add(securityKey);
                TokenValidationParameters parameters = new TokenValidationParameters
                {
                    ValidIssuer = apiIdentifier,
                    //ValidAudience = "mvc.manual",
                    IssuerSigningKeys = keys,
                    NameClaimType = System.Security.Claims.ClaimTypes.Name,
                    RoleClaimType = System.Security.Claims.ClaimTypes.Role,

                    RequireSignedTokens = true
                };

                var tokenHandler = new JwtSecurityTokenHandler();
                tokenHandler.InboundClaimTypeMap.Clear();
                SecurityToken validatedToken;
                ClaimsPrincipal claimP = tokenHandler.ValidateToken(responseJwt, parameters, out validatedToken);

                //aud is the 'jti' , the guid you sent, Merchant jti Id 
                var aud = claimP.FindFirst("aud")?.Value ?? "";
                //iss Issuer - The request JWT's iss field echoed back.
                var iss = claimP.FindFirst("iss")?.Value ?? "";
                //jti A unique identifier for this response JWT. This value is generated by Cardinal
                var jti = claimP.FindFirst("jti")?.Value ?? "";
                //ConsumerSessionId The unique session Id for the current user.
                var sid = claimP.FindFirst("ConsumerSessionId")?.Value ?? "";
                //Payload The response object for your request. This field will contain any actual state information on the transaction. This is the decoded data object that is passed into the payments.validated event as the first argument.
                var payload = claimP.FindFirst("Payload")?.Value ?? "";
                var events = JObject.Parse(payload);
                // if (!string.Equals(nonce, "random_nonce")) throw new Exception("invalid nonce");
                valid = true;

            }
            catch (Exception ex)
            {
                Console.WriteLine("Signature validation failed! JWT is not valid!");
            }
            return valid;
        }

        public static long ToUnixTime(this DateTime date)
        {
            var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return Convert.ToInt64((date - epoch).TotalSeconds);
        }

        //public void GenerateJwt(string apiKey, string apiIdentifier, string orgUnitId)
        //    {
            //    var payload = new Dictionary<string, object>
            //        {
            //            { "exp", (DateTime.UtcNow.AddDays(365) - new DateTime(1970, 1, 1)).TotalMilliseconds},
            //            {"iat", (DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalMilliseconds},
            //            {"jti", Guid.NewGuid()},
            //            {"iss", apiIdentifier},
            //            {"OrgUnitId", orgUnitId},
            //            {
            //                "Payload", new Order
            //                {
            //                    OrderDetails = new OrderDetails
            //                    {
            //                        OrderNumber = Guid.NewGuid().ToString()
            //                    }
            //                }
            //            }
            //        };

            //    return JsonWebToken..Encode(payload, apiKey, JwtHashAlgorithm.HS256);
            //var jwtToken = new JwtSecurityToken(token);
            //jwtToken.Subject

            //}

      
    }
}